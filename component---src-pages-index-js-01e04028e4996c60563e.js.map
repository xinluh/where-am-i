{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/google_sheet.js"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","useState","itinerary","setItinerary","useEffect","fetch","then","response","json","values","header","rows","slice","filter","d","now","Date","map","row","Object","fromEntries","value","colIdx","formattedDate","date","dateFormatted","isToday","getMonth","getDate","isFuture","isPast","iti","today","console","log","todayItinerary","find","i","tomorrowItinerary","nightAt","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"uQAyEeA,UAjEG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAFG,EAINC,mBAAS,IAApCC,EAJiC,KAItBC,EAJsB,KAKxCC,qBAAU,WCPHC,MADE,2JAENC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAd,GACJ,IAAKA,EAAKiB,OACR,KAAM,8BAER,IAAMC,EAASlB,EAAKiB,OAAO,GAErBE,EAAOnB,EAAKiB,OAAOG,MAAM,GAAGC,QAAO,SAAAC,GAAC,OAAIA,EAAE,MAC1CC,EAAM,IAAIC,KAEhB,OAAOL,EAAKM,KAAI,SAAAC,GACd,IAAMT,EAASU,OAAOC,YACpBF,EAAID,KAAI,SAACI,EAAOC,GAAR,MAAmB,CAACZ,EAAOY,GAASD,OAGxCE,EAAgB,IAAIP,KAAQP,EAAOe,KAAnB,SACtB,OAAO,OAAP,UACKf,EADL,CAEEgB,cAAeF,EACfG,QAASjB,EAAOe,OAAYT,EAAIY,WAAa,EAApC,IAAyCZ,EAAIa,UACtDC,SAAUN,EAAgBR,EAC1Be,OAAQP,EAAgBR,UDdjBT,MAAK,SAAAyB,GAChB5B,EAAa4B,QAEd,IAEH,IAAMC,EAAQ,IAAIhB,KAClBiB,QAAQC,IAAOF,EAAML,WAArB,IAAmCK,EAAMJ,WACzC,IAAMO,EAAiBjC,EAAUkC,MAAK,SAAAC,GAAC,OAAIA,EAAEX,WACvCY,EAAoBpC,EAAUkC,MAAK,SAAAC,GAAC,OAAIA,EAAER,YAGhD,OADAI,QAAQC,IAAIhC,GAEV,kBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cAEVsC,GACC,uCACUA,EAAeX,KADzB,+BAC2D,IACxDW,EAAeI,QAFlB,KAMDD,GACC,0CACaA,EAAkBd,KAD/B,yCAEMc,EAAkBC,QAFxB,KAMDzC,EAAMmB,KAAI,YAAe,IAAZuB,EAAW,EAAXA,KACN3C,EAAQ2C,EAAKC,YAAY5C,OAAS2C,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWC,GAAIT,EAAKE,OAAOC,MACjD9C,IAGL,+BAAQ2C,EAAKC,YAAYjB,OAE3B,iCACE,uBACE0B,wBAAyB,CACvBC,OAAQX,EAAKC,YAAYW,aAAeZ,EAAKa,kBAtD/D,IAmEaC,EAAS","file":"component---src-pages-index-js-01e04028e4996c60563e.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport fetchSheet from \"../utils/google_sheet\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  const [itinerary, setItinerary] = useState([])\n  useEffect(() => {\n    fetchSheet().then(iti => {\n      setItinerary(iti)\n    })\n  }, [])\n\n  const today = new Date()\n  console.log(`${today.getMonth()}/${today.getDate()}`)\n  const todayItinerary = itinerary.find(i => i.isToday)\n  const tomorrowItinerary = itinerary.find(i => i.isFuture)\n\n  console.log(itinerary)\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n\n      {todayItinerary && (\n        <div>\n          Today ({todayItinerary.date}), I'm spending the night at{\" \"}\n          {todayItinerary.nightAt}.\n        </div>\n      )}\n\n      {tomorrowItinerary && (\n        <div>\n          Tomorrow ({tomorrowItinerary.date}), I'm planning to spend the night\n          at {tomorrowItinerary.nightAt}.\n        </div>\n      )}\n\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","const API_KEY = \"AIzaSyApgm2nFzwLrOyISptqXF9RbiHyq1Josbk\"\nconst TAB = \"itinerary\"\nconst SHEET_ID = \"115_n7jB4DH062_OW9zcOHeezJi-MLRqUfeR8V1dpzhQ\"\n\nexport default function fetchSheet() {\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${TAB}?key=${API_KEY}`\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      if (!data.values) {\n        throw \"Failed to load google sheet\"\n      }\n      const header = data.values[0]\n      // discard first 2 rows; also drop rows without first column\n      const rows = data.values.slice(2).filter(d => d[0])\n      const now = new Date()\n\n      return rows.map(row => {\n        const values = Object.fromEntries(\n          row.map((value, colIdx) => [header[colIdx], value])\n        )\n\n        const formattedDate = new Date(`${values.date}/2020`)\n        return {\n          ...values,\n          dateFormatted: formattedDate,\n          isToday: values.date === `${now.getMonth() + 1}/${now.getDate()}`,\n          isFuture: formattedDate > now,\n          isPast: formattedDate < now,\n        }\n      })\n    })\n}\n"],"sourceRoot":""}